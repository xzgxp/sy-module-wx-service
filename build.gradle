apply plugin: 'java'
apply plugin: 'eclipse'


// 参数设置
sourceCompatibility = '1.6'
targetCompatibility = '1.6'
groupId = 'sy-module'
artifactId = 'module-wx-service'
version = '1.2b9'
developerName = 'wxService'


// 发布版本
jar {
    manifest {
        attributes 'Implementation-Title': artifactId, 'Implementation-Version': version
    }
}
[compileJava, javadoc, compileTestJava]*.options*.encoding = 'UTF-8'


// 中央库
repositories {
    maven { url 'file://C:\\Users\\Administrator\\git\\repo' }
    maven { url 'http://192.168.0.220:8081/nexus/content/groups/public/' }
    maven { url 'https://raw.githubusercontent.com/wonder-sy0618/repo/master/' }
    maven { url 'http://maven.oschina.net/content/groups/public/' }
	mavenCentral()
}


// 依赖
dependencies {
	
    compile 'sy-module:module-core:2.0b1'
	
    compile 'commons-httpclient:commons-httpclient:3.1'
	
	compile 'dom4j:dom4j:1.6.1'
	compile 'jaxen:jaxen:1.1.6'
	compile 'jdom:jdom:1.1'
	 
	testCompile 'junit:junit:4.2'
	testCompile 'mysql:mysql-connector-java:5.1.24'
	testCompile 'commons-dbcp:commons-dbcp:1.4'
	
	testCompile 'sy-module:module-control-center:1.1'
	
}

// 生成Eclipse支持时，自动生成Deployment Assembly
eclipse.classpath.file.withXml {
	def node = it.asNode();
	for (Node n : node.children()) {
		if ('lib'.equals(n.attribute('kind'))) {
			def node_attributes = new Node(n, 'attributes');
			def map = [name:'org.eclipse.jst.component.dependency', value:'/WEB-INF/lib']
			def node_attribute = new Node(node_attributes, 'attribute', map);
		}
	}
}
task createProjectDirs << {
   sourceSets*.java.srcDirs*.each { 
   it = new File(it, 'module/'+developerName+'');
   it.mkdirs() }
   sourceSets*.resources.srcDirs*.each {
   it = new File(it, 'module/'+developerName+'');
   it.mkdirs() }
   new File(project.projectDir, 'src/main/webapp/module/'+developerName+'/resources').mkdirs()
   new File(project.projectDir, 'src/main/webapp/module/'+developerName+'/view').mkdirs()
}
eclipseClasspath.dependsOn createProjectDirs



// 生成Jar包时，自动生成源代码包和文档包
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}



// 编译完成后，自动拷入资源，并生成module.xml文件
task copyResourcesFile << {
	copy {
	   from 'src/main/webapp/module/'+developerName+'/resources'
	   into 'build/resources/main/webapp/module/'+developerName+'/resources'
	}
	copy {
	   from 'src/main/webapp/module/'+developerName+'/view'
	   into 'build/resources/main/webapp/module/'+developerName+'/view'
	}
}
jar.dependsOn copyResourcesFile
task createSyXml << {
	File configFile = file('build/resources/main/module.xml')
	def writer = new StringWriter()
	def xml = new groovy.xml.MarkupBuilder(writer)
	xml.sy() {
		dbinit(dbtype:'mysql') {
			checkConnectionSql('select 1')
			checkTableName('module_wxservice_msg_dump')
			initSqlPath('module/'+developerName+'/mysql-init.sql')
		}
		dbinit(dbtype:'sqlserver') {
			checkConnectionSql('select 1')
			checkTableName('module_wxservice_msg_dump')
			initSqlPath('module/'+developerName+'/sqlserver-init.sql')
		}
		resources() {
			release() {
				from('webapp/module/'+developerName+'/resources')
				to('../../module/'+developerName+'/resources')
			}
			release() {
				from('webapp/module/'+developerName+'/view')
				to('../../module/'+developerName+'/view')
			}
		}
		controlCenter() {
			menu(name:'微信服务组件') {
				item() {
					display('用户变化')
					url('wxService/controlCenter/userchange.do')
				}
				item() {
					display('设置')
					url('wxService/controlCenter/setting.do')
				}
			}
		}
	}
	configFile.getParentFile().mkdirs();
	configFile.createNewFile();
	configFile.write(writer.toString())
}
jar.dependsOn createSyXml



// 发布到仓库
apply plugin: 'maven-publish'
group = groupId
artifact = artifactId
publishing {
    publications {
		maven(MavenPublication) {
			groupId group
			artifactId artifact
			version version
			pom.withXml {
				// 修改依赖的scope
				for (n in asNode()['dependencies'][0]) {
					for (s in n['scope']) {
						s.setValue('compile')
					}
				}
				// 写入更多属性
				asNode().appendNode('packaging', 'jar')
				asNode().appendNode('description', 'shiying @ caituo')
				asNode().appendNode('inceptionYear', '2014')
				def license = asNode().appendNode('licenses').appendNode('license')
				license.appendNode('name', 'GNU GENERAL PUBLIC LICENSE, Version 2, June 1991')
				license.appendNode('url', 'http://www.gnu.org/licenses/gpl-2.0.txt')
				license.appendNode('distribution', 'release')
			}
			from components.java
		}
		maven(MavenPublication) {
			artifact sourcesJar
			artifact javadocJar
		}
    }
    repositories {
        maven {
            url '$rootDir/../../repo'
        }
    }
}





